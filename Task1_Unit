using Microsoft.VisualStudio.TestTools.UnitTesting;
using GeometryLibrary;

namespace GeometryLibraryTests
{
    [TestClass]
    public class ShapeTests
    {
        [TestMethod]
        public void CircleArea_CorrectRadius_ReturnsCorrectArea()
        {
            double radius = 5;
            Circle circle = new Circle(radius);

            double expectedArea = Math.PI * radius * radius;
            double actualArea = circle.CalculateArea();

            Assert.AreEqual(expectedArea, actualArea, 0.001);
        }

        [TestMethod]
        public void TriangleArea_CorrectSides_ReturnsCorrectArea()
        {
            double side1 = 3;
            double side2 = 4;
            double side3 = 5;
            Triangle triangle = new Triangle(side1, side2, side3);

            double s = (side1 + side2 + side3) / 2;
            double expectedArea = Math.Sqrt(s * (s - side1) * (s - side2) * (s - side3));
            double actualArea = triangle.CalculateArea();

            Assert.AreEqual(expectedArea, actualArea, 0.001);
        }

        [TestMethod]
        public void Triangle_IsRightAngled()
        {
            double side1 = 3;
            double side2 = 4;
            double side3 = 5;
            Triangle triangle = new Triangle(side1, side2, side3);

            Assert.IsTrue(triangle.IsRightAngled());
        }

        [TestMethod]
        public void Triangle_NotRightAngled()
        {
            double side1 = 2;
            double side2 = 3;
            double side3 = 4;
            Triangle triangle = new Triangle(side1, side2, side3);

            Assert.IsFalse(triangle.IsRightAngled());
        }
    }
}
